{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Custom Planner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, you will learn how to integrate your own optimization algorithm to be used within _Olympus_. As a simple example, here we will create a `Planner` that implements a random sampler. To better understand what is happening in the code and how to further customize your `Planner`, we suggest you take a look at the \"Developer's Guide\" section of the documentation.\n",
    "\n",
    "First, we import the `CustomPlanner` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from olympus.planners import CustomPlanner"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we define a class that inherits from `CustomPlanner` and implements the `_ask` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from olympus import ParameterVector\n",
    "\n",
    "class RandomSampler(CustomPlanner):\n",
    "    \n",
    "    def _ask(self):\n",
    "        new_params = []\n",
    "        for param in self._param_space:\n",
    "            new_param = np.random.uniform(low=param['domain'][0], high=param['domain'][1])\n",
    "            new_params.append(new_param)\n",
    "    \n",
    "        return ParameterVector(array=new_params, param_space=self.param_space)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check whether we can not use our new algorithm within _Olympus_."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from olympus import Surface\n",
    "\n",
    "# initialise an analytical toy surface\n",
    "surface = Surface(kind='Dejong', param_dim=2)\n",
    "\n",
    "# initialise our planner\n",
    "planner = RandomSampler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[0;37m[INFO] Optimize iteration 1\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 2\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 3\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 4\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 5\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 6\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 7\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 8\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 9\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m\u001b[0;37m[INFO] Optimize iteration 10\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining parameters from planner...\n",
      "\u001b[0m\u001b[0;37m[INFO] Obtaining measurement from emulator...\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# optimise the surface for 10 iterations\n",
    "campaign = planner.optimize(surface, num_iter=10, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.87168557 0.62387334] [3.04089887]\n",
      "[0.61641219 0.14017234] [2.9758572]\n",
      "[0.10831711 0.32985981] [3.28347596]\n",
      "[0.53705365 0.01023886] [2.82177185]\n",
      "[0.08795505 0.38948555] [3.08114755]\n",
      "[0.23275568 0.63885554] [2.8131307]\n",
      "[0.3896672  0.70026978] [2.46556129]\n",
      "[0.44465784 0.9749147 ] [2.92317688]\n",
      "[0.1069464  0.32465186] [3.30674879]\n",
      "[0.64876744 0.03969659] [3.36517084]\n"
     ]
    }
   ],
   "source": [
    "# show the parameter values we queried and their merit\n",
    "for p, v in zip(campaign.observations.get_params(), campaign.observations.get_values()):\n",
    "    print(p, v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we realised that our custom planner is stochastic and does not allow for reproducible results, so we would like to add a `random_seed` argument such that we fix the random seed if desired. To do so, we overwrite the `__init__` method inherited from `CustomPlanner` and add `random_seed` as an argument. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from olympus import ParameterVector\n",
    "from olympus.planners import CustomPlanner, AbstractPlanner\n",
    "import numpy as np\n",
    "\n",
    "class RandomSampler(CustomPlanner):\n",
    "    \"\"\"My custom sampler\"\"\"\n",
    "    \n",
    "    def __init__(self, goal='minimize', random_seed=None):\n",
    "        AbstractPlanner.__init__(**locals())\n",
    "        np.random.seed(self.random_seed)\n",
    "    \n",
    "    def _ask(self):\n",
    "        new_params = []\n",
    "        for param in self._param_space:\n",
    "            new_param = np.random.uniform(low=param['domain'][0], high=param['domain'][1])\n",
    "            new_params.append(new_param)\n",
    "    \n",
    "        return ParameterVector(array=new_params, param_space=self.param_space)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization Number 1\n",
      "[0.37454012 0.95071431] [3.24309206]\n",
      "[0.73199394 0.59865848] [2.51640451]\n",
      "[0.15601864 0.15599452] [3.70941192]\n",
      "\n",
      "Optimization Number 2\n",
      "[0.37454012 0.95071431] [3.24309206]\n",
      "[0.73199394 0.59865848] [2.51640451]\n",
      "[0.15601864 0.15599452] [3.70941192]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# do the optimization twice\n",
    "for i in range(2):\n",
    "    surface = Surface(kind='Dejong', param_dim=2)\n",
    "    planner = RandomSampler(random_seed=42)\n",
    "    campaign = planner.optimize(surface, num_iter=3, verbose=False)\n",
    "\n",
    "    print(f'Optimization Number {i+1}')\n",
    "    for p, v in zip(campaign.observations.get_params(), campaign.observations.get_values()):\n",
    "        print(p, v)\n",
    "    \n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can/should see above, the first and second optimizations queried the same points as we have now fixed the random seed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "olympus",
   "language": "python",
   "name": "olympus"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
